config.f90:  real(kind=8) :: lfactor,lattvec(3,3),epsilon(3,3)
config.f90:  namelist /crystal/ lfactor,lattvec,elements,types,positions,masses,gfactors,&
config.f90:  real(kind=8) :: cgrid,V,rV,rlattvec(3,3),slattvec(3,3)
config.f90:    lattvec=lfactor*lattvec
config.f90:       call cross_product(lattvec(:,j),lattvec(:,k),rlattvec(:,i))
config.f90:    V=abs(dot_product(lattvec(:,1),rlattvec(:,1)))
config.f90:    rlattvec=rV*rlattvec
config.f90:    cartesian=matmul(lattvec,positions)
config.f90:       uorientations=matmul(lattvec,orientations)
config.f90:    nsymm=get_num_operations(lattvec,natoms,types,positions)
config.f90:    call get_operations(lattvec,natoms,types,positions,nsymm,&
config.f90:    call get_cartesian_operations(lattvec,nsymm,rotations_orig,translations,&
config.f90:       tmp1=matmul(transpose(lattvec),lattvec)
config.f90:       base_sigma=base_sigma+(dot_product(rlattvec(:,nu),v)/ngrid(nu))**2
Binary file config.o matches
gruneisen.f90:             kspace(ik,:)=rlattvec(:,1)*(ii-1.0)/ngrid(1)+&
gruneisen.f90:                  rlattvec(:,2)*(jj-1.0)/ngrid(2)+&
gruneisen.f90:                  rlattvec(:,3)*(kk-1.0)/ngrid(3)
Binary file gruneisen.o matches
input.f90:    tmp=lattvec
input.f90:    R_j=matmul(lattvec,anint(R_j/10.))
input.f90:    tmp=lattvec
input.f90:    R_k=matmul(lattvec,anint(R_k/10.))
Binary file input.o matches
phonon_routines.f90:    do ii=1,Ngrid(1)        ! rlattvec(:,1) direction
phonon_routines.f90:       do jj=1,Ngrid(2)     ! rlattvec(:,2) direction
phonon_routines.f90:          do kk=1,Ngrid(3)  ! rlattvec(:,3) direction
phonon_routines.f90:             kspace(indexK,:)=rlattvec(:,1)*(ii-1.0)/ngrid(1)+&
phonon_routines.f90:                  rlattvec(:,2)*(jj-1.0)/ngrid(2)+&
phonon_routines.f90:                  rlattvec(:,3)*(kk-1.0)/ngrid(3)
phonon_routines.f90:                r=kpoints(ik,:)+ix1*rlattvec(:,1)+iy1*rlattvec(:,2)+&
phonon_routines.f90:                     iz1*rlattvec(:,3)
phonon_routines.f90:                      rcell=matmul(lattvec,(/ix1,iy1,iz1/)-(/1,1,1/))
phonon_routines.f90:                               rl=ix2*scell(1)*lattvec(:,1)+iy2*scell(2)*lattvec(:,2)+&
phonon_routines.f90:                                    iz2*scell(3)*lattvec(:,3)
phonon_routines.f90:    r=transpose(matmul(lattvec,positions))/bohr2nm
phonon_routines.f90:    cell_r(:,1:3)=transpose(lattvec)/bohr2nm
phonon_routines.f90:    cell_g(:,1:3)=transpose(rlattvec)*bohr2nm
phonon_routines.f90:    alpha=(2.*pi*bohr2nm/dnrm2(3,lattvec(:,1),1))**2
Binary file phonon_routines.o matches
processes.f90:             realqprime=matmul(rlattvec,qprime/dble(ngrid))
processes.f90:                realqdprime=matmul(rlattvec,qdprime/dble(ngrid))
processes.f90:             realqprime=matmul(rlattvec,qprime/dble(ngrid))
processes.f90:                realqdprime=matmul(rlattvec,qdprime/dble(ngrid))
processes.f90:             realqprime=matmul(rlattvec,qprime/dble(ngrid))
processes.f90:                realqdprime=matmul(rlattvec,qdprime/dble(ngrid))
processes.f90:             realqprime=matmul(rlattvec,qprime/dble(ngrid))
processes.f90:                realqdprime=matmul(rlattvec,qdprime/dble(ngrid))
Binary file processes.o matches
ShengBTE.f90:           q0(ll,:)=rlattvec(:,1)*(ii-1.d0)/ngrid(1)+&
ShengBTE.f90:                rlattvec(:,2)*(jj-1.d0)/ngrid(2)+&
ShengBTE.f90:                rlattvec(:,3)*(kk-1.d0)/ngrid(3)
ShengBTE.f90:     write(1,"(3F20.10,A12)") rlattvec(:,1), "# nm-1,b1" 
ShengBTE.f90:     write(1,"(3F20.10,A12)") rlattvec(:,2), "# nm-1,b2" 
ShengBTE.f90:     write(1,"(3F20.10,A12)") rlattvec(:,3), "# nm-1,b3" 
Binary file ShengBTE.o matches
